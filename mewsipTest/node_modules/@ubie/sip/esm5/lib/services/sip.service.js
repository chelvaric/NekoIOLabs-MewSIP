/**
 * @fileoverview added by tsickle
 * Generated from: lib/services/sip.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { UA } from 'sip.js/lib/UA';
import * as i0 from "@angular/core";
var SipService = /** @class */ (function () {
    function SipService() {
    }
    //accept an incomming call
    //accept an incomming call
    /**
     * @return {?}
     */
    SipService.prototype.acceptCall = 
    //accept an incomming call
    /**
     * @return {?}
     */
    function () {
        if (this.IncommingCallSession != undefined) {
            this.IncommingCallSession.accept();
        }
    };
    //refuse a call thats incomming
    //refuse a call thats incomming
    /**
     * @return {?}
     */
    SipService.prototype.refuseCall = 
    //refuse a call thats incomming
    /**
     * @return {?}
     */
    function () {
        if (this.IncommingCallSession != undefined) {
            this.IncommingCallSession.close();
        }
    };
    ///set the config for the sip, makes a user agent that will be used to recieve calls and more
    ///set the config for the sip, makes a user agent that will be used to recieve calls and more
    /**
     * @param {?} config
     * @return {?}
     */
    SipService.prototype.setConfig = 
    ///set the config for the sip, makes a user agent that will be used to recieve calls and more
    /**
     * @param {?} config
     * @return {?}
     */
    function (config) {
        //make the options
        /** @type {?} */
        var options = {
            uri: config.Uri,
            authorizationUser: config.UserName,
            displayName: config.DisplayName,
            transportOptions: {
                wsServers: [config.WebsocketUrl]
            },
            password: config.Password
        };
        //create the client
        this.UserAgent = new UA(options);
    };
    //register the events  on the user agent were interested in
    //register the events  on the user agent were interested in
    /**
     * @private
     * @return {?}
     */
    SipService.prototype.registerAgentEvents = 
    //register the events  on the user agent were interested in
    /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        this.UserAgent.on('invite', (/**
         * @param {?} session
         * @return {?}
         */
        function (session) { return _this.inviteCallBack(session); }));
        this.UserAgent.on('registrationFailed', (/**
         * @param {?=} response
         * @param {?=} cause
         * @return {?}
         */
        function (response, cause) { return _this.registerFailedCallBack(response, cause); }));
        this.UserAgent.on('registered', (/**
         * @param {?=} response
         * @return {?}
         */
        function (response) { return _this.registeredCallBack(response); }));
    };
    /**
     * @private
     * @param {?=} response
     * @return {?}
     */
    SipService.prototype.registeredCallBack = /**
     * @private
     * @param {?=} response
     * @return {?}
     */
    function (response) {
        if (this.OnRegistered != undefined) {
            this.OnRegistered.emit(true);
        }
    };
    /**
     * @private
     * @param {?=} response
     * @param {?=} reason
     * @return {?}
     */
    SipService.prototype.registerFailedCallBack = /**
     * @private
     * @param {?=} response
     * @param {?=} reason
     * @return {?}
     */
    function (response, reason) {
        if (this.OnRegistered != undefined) {
            this.OnRegistered.emit(false);
        }
    };
    /**
     * @private
     * @param {?} session
     * @return {?}
     */
    SipService.prototype.inviteCallBack = /**
     * @private
     * @param {?} session
     * @return {?}
     */
    function (session) {
        if (session != undefined) {
            this.registerInviteEvents(session);
            this.IncommingCallSession = session;
            this.OnIncommingCall.next(session.contact);
        }
    };
    /**
     * @private
     * @param {?} session
     * @return {?}
     */
    SipService.prototype.registerInviteEvents = /**
     * @private
     * @param {?} session
     * @return {?}
     */
    function (session) {
        var _this = this;
        session.on('trackAdded', (/**
         * @return {?}
         */
        function () { return _this.trackAddedCallback(); }));
    };
    /**
     * @private
     * @return {?}
     */
    SipService.prototype.trackAddedCallback = /**
     * @private
     * @return {?}
     */
    function () {
        //check if the session isn't undefined
        if (this.IncommingCallSession != undefined) {
            //get the peerConnection
            /** @type {?} */
            var peerConnection = this.IncommingCallSession.sessionDescriptionHandler['peerConnection'];
            //make media
            /** @type {?} */
            var media_1 = new MediaStream();
            //get audio and video track from remote
            peerConnection.getReceivers().forEach((/**
             * @param {?} receiver
             * @return {?}
             */
            function (receiver) {
                media_1.addTrack(receiver.track);
            }));
            this.OnMediaRecieved.emit(media_1);
            return this.IncommingCallSession;
        }
    };
    SipService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    SipService.ctorParameters = function () { return []; };
    /** @nocollapse */ SipService.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function SipService_Factory() { return new SipService(); }, token: SipService, providedIn: "root" });
    return SipService;
}());
export { SipService };
if (false) {
    /** @type {?} */
    SipService.prototype.OnRegistered;
    /** @type {?} */
    SipService.prototype.OnIncommingCall;
    /** @type {?} */
    SipService.prototype.OnMediaRecieved;
    /**
     * @type {?}
     * @private
     */
    SipService.prototype.UserAgent;
    /**
     * @type {?}
     * @private
     */
    SipService.prototype.IncommingCallSession;
    /**
     * @type {?}
     * @private
     */
    SipService.prototype.InCall;
}
//# sourceMappingURL=data:application/json;base64,