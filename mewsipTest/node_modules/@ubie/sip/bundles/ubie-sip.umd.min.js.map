{"version":3,"sources":["ng://@ubie/sip/lib/services/sip.service.ts"],"names":["SipService","prototype","acceptCall","undefined","this","IncommingCallSession","accept","refuseCall","close","setConfig","config","options","uri","Uri","authorizationUser","UserName","displayName","DisplayName","transportOptions","wsServers","WebsocketUrl","password","Password","UserAgent","UA","registerAgentEvents","_this","on","session","inviteCallBack","response","cause","registerFailedCallBack","registeredCallBack","OnRegistered","emit","reason","registerInviteEvents","OnIncommingCall","next","contact","trackAddedCallback","peerConnection","sessionDescriptionHandler","media_1","MediaStream","getReceivers","forEach","receiver","addTrack","track","OnMediaRecieved","Injectable","args","providedIn"],"mappings":"2UAAA,IAAAA,EAAA,WA8BE,SAAAA,YAIAA,EAAAC,UAAAC,WAAA,WAEkCC,MAA7BC,KAAKC,sBAEND,KAAKC,qBAAqBC,UAK9BN,EAAAC,UAAAM,WAAA,WAEkCJ,MAA7BC,KAAKC,sBAEND,KAAKC,qBAAqBG,SAK9BR,EAAAC,UAAAQ,UAAA,SAAUC,OAIFC,EAAsB,CACxBC,IAAKF,EAAOG,IACZC,kBAAmBJ,EAAOK,SAC1BC,YAAaN,EAAOO,YACpBC,iBAAkB,CAChBC,UAAW,CAACT,EAAOU,eAErBC,SAAUX,EAAOY,UAInBlB,KAAKmB,UAAY,IAAIC,EAAAA,GAAGb,IAIpBX,EAAAC,UAAAwB,oBAAR,WAAA,IAAAC,EAAAtB,KAEIA,KAAKmB,UAAUI,GAAG,UAAQ,SAAEC,GAAgC,OAAAF,EAAKG,eAAeD,MAChFxB,KAAKmB,UAAUI,GAAG,sBAAoB,SAAEG,EAAeC,GAAgB,OAAAL,EAAKM,uBAAuBF,EAASC,MAC5G3B,KAAKmB,UAAUI,GAAG,cAAY,SAAEG,GAAmB,OAAAJ,EAAKO,mBAAmBH,OAGvE9B,EAAAC,UAAAgC,mBAAR,SAA2BH,GAED3B,MAArBC,KAAK8B,cAEN9B,KAAK8B,aAAaC,MAAK,IAInBnC,EAAAC,UAAA+B,uBAAR,SAA+BF,EAAeM,GAEpBjC,MAArBC,KAAK8B,cAEN9B,KAAK8B,aAAaC,MAAK,IAInBnC,EAAAC,UAAA4B,eAAR,SAAuBD,GAEPzB,MAAXyB,IAEDxB,KAAKiC,qBAAqBT,GAC1BxB,KAAKC,qBAAuBuB,EAC5BxB,KAAKkC,gBAAgBC,KAAKX,EAAQY,WAI9BxC,EAAAC,UAAAoC,qBAAR,SAA6BT,GAA7B,IAAAF,EAAAtB,KAEGwB,EAAQD,GAAG,cAAY,WAAQ,OAAAD,EAAKe,yBAG/BzC,EAAAC,UAAAwC,mBAAR,WAGE,GAAgCtC,MAA7BC,KAAKC,qBACR,KAGMqC,EAAiBtC,KAAKC,qBAAqBsC,0BAA0C,eAGrFC,EAAQ,IAAIC,YAUhB,OAPAH,EAAeI,eAAeC,SAAO,SAAWC,GAC9CJ,EAAMK,SAASD,EAASE,UAG1B9C,KAAK+C,gBAAgBhB,KAAKS,GAGnBxC,KAAKC,2CA1HjB+C,EAAAA,WAAUC,KAAA,CAAC,CACVC,WAAY,wJARd","sourcesContent":["import { Injectable, EventEmitter } from '@angular/core';\nimport { InviteServerContext, InviteClientContext } from 'sip.js/lib/Session';\nimport { UA } from 'sip.js/lib/UA';\nimport { SessionDescriptionHandler } from 'sip.js/lib/session-description-handler';\nimport { SipConfig } from '../interfaces/sip-config';\nimport { Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SipService {\n\n  //events\n\n  //this event gets triggered when the user is registered to the sip server\n  OnRegistered: EventEmitter<boolean>;\n\n  //this event is triggered when we recieve a call\n  OnIncommingCall: EventEmitter<string>;\n\n  //this event is triggered when the media stream is ready to be attached to a <video></video> tag it should be added to the src and then call play()\n  OnMediaRecieved: EventEmitter<MediaStream>;\n\n  //properties\n  private UserAgent:UA;\n\n  private IncommingCallSession:InviteServerContext;\n\n  private InCall:boolean;\n\n  constructor() { }\n\n\n  //accept an incomming call\n  acceptCall()\n  {\n    if(this.IncommingCallSession != undefined)\n    {\n      this.IncommingCallSession.accept();\n    }\n  }\n\n  //refuse a call thats incomming\n  refuseCall()\n  {\n    if(this.IncommingCallSession != undefined)\n    {\n      this.IncommingCallSession.close();\n    }\n  }\n\n  ///set the config for the sip, makes a user agent that will be used to recieve calls and more\n  setConfig(config:SipConfig)\n  {\n     \n      //make the options\n      var options: UA.Options = {\n        uri: config.Uri,\n        authorizationUser: config.UserName,\n        displayName: config.DisplayName,\n        transportOptions: {\n          wsServers: [config.WebsocketUrl]\n        },\n        password: config.Password\n  \n      };\n      //create the client\n      this.UserAgent = new UA(options); \n  }\n\n  //register the events  on the user agent were interested in\n  private registerAgentEvents()\n  {\n      this.UserAgent.on('invite',(session:InviteServerContext) => this.inviteCallBack(session));\n      this.UserAgent.on('registrationFailed',(response?: any,cause?: any) => this.registerFailedCallBack(response,cause));\n      this.UserAgent.on('registered',(response?: any) => this.registeredCallBack(response));\n  }\n\n  private registeredCallBack(response?: any)\n  {\n    if(this.OnRegistered != undefined)\n    {\n      this.OnRegistered.emit(true);\n    }\n  }\n\n  private registerFailedCallBack(response?: any,reason?: any)\n  {\n    if(this.OnRegistered != undefined)\n    {\n      this.OnRegistered.emit(false);\n    }\n  }\n\n  private inviteCallBack(session:InviteServerContext)\n  {\n    if(session != undefined)\n    {\n      this.registerInviteEvents(session);\n      this.IncommingCallSession = session;    \n      this.OnIncommingCall.next(session.contact);\n    }\n  }\n\n  private registerInviteEvents(session:InviteServerContext)\n  {\n     session.on('trackAdded', () => this.trackAddedCallback())\n  }\n\n  private trackAddedCallback() : InviteServerContext\n  {\n    //check if the session isn't undefined\n    if(this.IncommingCallSession != undefined)\n    {\n\n      //get the peerConnection\n      var peerConnection = this.IncommingCallSession.sessionDescriptionHandler['peerConnection'];\n\n      //make media\n      let media = new MediaStream();\n\n       //get audio and video track from remote\n      peerConnection.getReceivers().forEach(function (receiver) {\n        media.addTrack(receiver.track);\n      });\n\n      this.OnMediaRecieved.emit(media);\n\n\n      return this.IncommingCallSession;\n    }\n  }\n\n}\n"]}