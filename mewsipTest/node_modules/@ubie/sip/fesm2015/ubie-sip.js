import { Injectable, ɵɵdefineInjectable } from '@angular/core';
import { UA } from 'sip.js/lib/UA';

/**
 * @fileoverview added by tsickle
 * Generated from: lib/interfaces/sip-config.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @record
 */
function SipConfig() { }
if (false) {
    /** @type {?} */
    SipConfig.prototype.Uri;
    /** @type {?} */
    SipConfig.prototype.UserName;
    /** @type {?} */
    SipConfig.prototype.Password;
    /** @type {?} */
    SipConfig.prototype.WebsocketUrl;
    /** @type {?} */
    SipConfig.prototype.DisplayName;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/services/sip.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class SipService {
    constructor() { }
    //accept an incomming call
    /**
     * @return {?}
     */
    acceptCall() {
        if (this.IncommingCallSession != undefined) {
            this.IncommingCallSession.accept();
        }
    }
    //refuse a call thats incomming
    /**
     * @return {?}
     */
    refuseCall() {
        if (this.IncommingCallSession != undefined) {
            this.IncommingCallSession.close();
        }
    }
    ///set the config for the sip, makes a user agent that will be used to recieve calls and more
    /**
     * @param {?} config
     * @return {?}
     */
    setConfig(config) {
        //make the options
        /** @type {?} */
        var options = {
            uri: config.Uri,
            authorizationUser: config.UserName,
            displayName: config.DisplayName,
            transportOptions: {
                wsServers: [config.WebsocketUrl]
            },
            password: config.Password
        };
        //create the client
        this.UserAgent = new UA(options);
    }
    //register the events  on the user agent were interested in
    /**
     * @private
     * @return {?}
     */
    registerAgentEvents() {
        this.UserAgent.on('invite', (/**
         * @param {?} session
         * @return {?}
         */
        (session) => this.inviteCallBack(session)));
        this.UserAgent.on('registrationFailed', (/**
         * @param {?=} response
         * @param {?=} cause
         * @return {?}
         */
        (response, cause) => this.registerFailedCallBack(response, cause)));
        this.UserAgent.on('registered', (/**
         * @param {?=} response
         * @return {?}
         */
        (response) => this.registeredCallBack(response)));
    }
    /**
     * @private
     * @param {?=} response
     * @return {?}
     */
    registeredCallBack(response) {
        if (this.OnRegistered != undefined) {
            this.OnRegistered.emit(true);
        }
    }
    /**
     * @private
     * @param {?=} response
     * @param {?=} reason
     * @return {?}
     */
    registerFailedCallBack(response, reason) {
        if (this.OnRegistered != undefined) {
            this.OnRegistered.emit(false);
        }
    }
    /**
     * @private
     * @param {?} session
     * @return {?}
     */
    inviteCallBack(session) {
        if (session != undefined) {
            this.registerInviteEvents(session);
            this.IncommingCallSession = session;
            this.OnIncommingCall.next(session.contact);
        }
    }
    /**
     * @private
     * @param {?} session
     * @return {?}
     */
    registerInviteEvents(session) {
        session.on('trackAdded', (/**
         * @return {?}
         */
        () => this.trackAddedCallback()));
    }
    /**
     * @private
     * @return {?}
     */
    trackAddedCallback() {
        //check if the session isn't undefined
        if (this.IncommingCallSession != undefined) {
            //get the peerConnection
            /** @type {?} */
            var peerConnection = this.IncommingCallSession.sessionDescriptionHandler['peerConnection'];
            //make media
            /** @type {?} */
            let media = new MediaStream();
            //get audio and video track from remote
            peerConnection.getReceivers().forEach((/**
             * @param {?} receiver
             * @return {?}
             */
            function (receiver) {
                media.addTrack(receiver.track);
            }));
            this.OnMediaRecieved.emit(media);
            return this.IncommingCallSession;
        }
    }
}
SipService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
SipService.ctorParameters = () => [];
/** @nocollapse */ SipService.ngInjectableDef = ɵɵdefineInjectable({ factory: function SipService_Factory() { return new SipService(); }, token: SipService, providedIn: "root" });
if (false) {
    /** @type {?} */
    SipService.prototype.OnRegistered;
    /** @type {?} */
    SipService.prototype.OnIncommingCall;
    /** @type {?} */
    SipService.prototype.OnMediaRecieved;
    /**
     * @type {?}
     * @private
     */
    SipService.prototype.UserAgent;
    /**
     * @type {?}
     * @private
     */
    SipService.prototype.IncommingCallSession;
    /**
     * @type {?}
     * @private
     */
    SipService.prototype.InCall;
}

/**
 * @fileoverview added by tsickle
 * Generated from: public-api.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * Generated from: ubie-sip.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { SipService };
//# sourceMappingURL=ubie-sip.js.map
